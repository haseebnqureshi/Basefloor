#!/usr/bin/env node

/**
 * Build script for the Basefloor package
 * This script:
 * 1. Builds the API package
 * 2. Builds the App package
 * 3. Generates component and store exports
 * 4. Packages everything together
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Ensure the dist directory exists
if (!fs.existsSync('dist')) {
  fs.mkdirSync('dist');
}

console.log('Building Basefloor package...');

// Build API
console.log('Building API...');
execSync('cd api && npm run build', { stdio: 'inherit' });

// Build App
console.log('Building App...');
execSync('cd app && npm run build', { stdio: 'inherit' });

// Generate component exports
console.log('Generating component exports...');
const componentFiles = glob.sync('app/components/**/*.vue');
const componentExports = componentFiles.map(file => {
  const componentName = path.basename(file, '.vue');
  const relativePath = './' + path.relative('app/components', file).replace(/\\/g, '/');
  return `export { default as Basefloor${componentName} } from '${relativePath}'`;
}).join('\n');

fs.writeFileSync('app/components/index.js', `/**
 * Export all components
 * This file is auto-generated by the build process
 */

${componentExports}
`);

// Generate store exports
console.log('Generating store exports...');
const storeFiles = glob.sync('app/stores/**/*.js').filter(file => !file.endsWith('index.js'));
const storeExports = storeFiles.map(file => {
  const storeName = path.basename(file, '.js');
  const relativePath = './' + path.relative('app/stores', file).replace(/\\/g, '/');
  return `export { use${storeName.charAt(0).toUpperCase() + storeName.slice(1)}Store } from '${relativePath}'`;
}).join('\n');

fs.writeFileSync('app/stores/index.js', `/**
 * Export all stores
 * This file is auto-generated by the build process
 */

${storeExports}
`);

// Create the main package
console.log('Creating main package...');
execSync('tsc', { stdio: 'inherit' });

console.log('Build complete!'); 